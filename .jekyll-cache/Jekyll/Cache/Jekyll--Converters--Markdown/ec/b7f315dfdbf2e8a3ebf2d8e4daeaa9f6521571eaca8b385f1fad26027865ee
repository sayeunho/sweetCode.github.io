I"<G<h2 id="객체란">객체란?</h2>
<ul>
  <li>서로 연관된 변수와 함수를 그룹핑하고 이름을 붙인것.</li>
  <li>다양한 데이터를 담을 수 있음.</li>
  <li>객체는 중괄호를 이용해 만들수 있고 키:값 쌍으로 구성된 프로퍼티를 여러개 넣을수있음.</li>
</ul>

<h3 id="class">class</h3>
<ul>
  <li>class는 조금더 연관있는 데이터를 한데 묶어놓는 컨테이너 같은 것.</li>
  <li>속성(fiels), method가 들어있음.</li>
  <li>template(템플릿), declare once , no data in (정의만 해놓은 것이기 때문에 메모리에는 올라가지않는다)</li>
  <li>introduced in es6</li>
  <li>클래스가 도입되기전에는 클래스정의 필요없이 바로 오브젝트를 만들수있었음(function을 이용해서 템플릿을 만드는 방법)</li>
  <li>기존에 존재하던 프로토타입의 베이스 위에 문법만 추가된것음
    <h3 id="1-class-의-선언">1. class 의 선언</h3>
  </li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="mi">1</span><span class="p">.</span> <span class="nx">Class</span> <span class="nx">declarations</span>
<span class="kd">class</span> <span class="nx">Person</span> <span class="p">{</span>
    <span class="c1">//constructor</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">){</span>
        <span class="c1">//fields</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">//methods</span>
    <span class="nx">speak</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">: hello!`</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">eunho</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">eunho</span><span class="dl">'</span><span class="p">,</span><span class="mi">20</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">eunho</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">eunho</span><span class="p">.</span><span class="nx">age</span><span class="p">);</span>
<span class="nx">eunho</span><span class="p">.</span><span class="nx">speak</span><span class="p">();</span>

<span class="mi">2</span><span class="p">.</span> <span class="nx">Getter</span> <span class="nx">and</span> <span class="nx">setters</span>

<span class="kd">class</span> <span class="nx">User</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">,</span> <span class="nx">age</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="nx">firstName</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="nx">lastName</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">age</span><span class="p">(</span><span class="kd">get</span> <span class="nx">age를</span> <span class="nx">호출</span><span class="p">)</span> <span class="o">=</span> <span class="nx">age</span><span class="p">(</span><span class="kd">set</span> <span class="nx">age</span> <span class="nx">를</span> <span class="nx">호출</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="kd">get</span> <span class="nx">age</span> <span class="p">()</span> <span class="p">{</span>
        <span class="c1">//값을 return</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_age</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kd">set</span> <span class="nx">age</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//값을 설정할수있음</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_age</span> <span class="o">=</span> <span class="nx">value</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="p">?</span> <span class="mi">0</span> <span class="p">:</span><span class="nx">value</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">user1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">User</span><span class="p">(</span><span class="dl">'</span><span class="s1">Steve</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Job</span><span class="dl">'</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>

<span class="mi">3</span><span class="p">.</span><span class="kr">public</span><span class="p">,</span> <span class="kr">private</span>
<span class="kd">class</span> <span class="nx">Experiment</span> <span class="p">{</span>
    <span class="nx">publicField</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">//public 속성</span>
    <span class="err">#</span><span class="nx">privateField</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">//클래스 내부에서만 접근이 가능함.</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">ex</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Experiment</span><span class="p">();</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ex</span><span class="p">.</span><span class="nx">publicField</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ex</span><span class="p">.</span><span class="nx">privateField</span><span class="p">);</span>

<span class="mi">4</span><span class="p">.</span> <span class="kd">static</span>
<span class="kd">class</span> <span class="nx">Article</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="nx">developer</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">eunho</span><span class="dl">'</span><span class="p">;</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">articleNumber</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">articleNumber</span> <span class="o">=</span> <span class="nx">articleNumber</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kd">static</span> <span class="nx">printDeveloper</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Article</span><span class="p">.</span><span class="nx">developer</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">article1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Article</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">article2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Article</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Article</span><span class="p">.</span><span class="nx">developer</span><span class="p">);</span>

<span class="mi">5</span><span class="p">.</span> <span class="nx">상속과</span> <span class="nx">다형성</span>
<span class="kd">class</span> <span class="nx">Shape</span> <span class="p">{</span>
     <span class="kd">constructor</span><span class="p">(</span><span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">,</span> <span class="nx">color</span><span class="p">)</span> <span class="p">{</span>
         <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">width</span><span class="p">;</span>
         <span class="k">this</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="nx">height</span><span class="p">;</span>
         <span class="k">this</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">color</span><span class="p">;</span>
     <span class="p">}</span>

     <span class="nx">draw</span><span class="p">()</span> <span class="p">{</span>
         <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`drawing </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="p">}</span><span class="s2"> color of`</span><span class="p">);</span>
     <span class="p">}</span>

     <span class="nx">getArea</span><span class="p">()</span> <span class="p">{</span>
         <span class="k">return</span> <span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="p">;</span>
     <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nx">Rectangel</span> <span class="kd">extends</span> <span class="nx">Shape</span><span class="p">{}</span> <span class="c1">//상속</span>
<span class="kd">class</span> <span class="nx">Triangle</span> <span class="kd">extends</span> <span class="nx">Shape</span> <span class="p">{</span> <span class="c1">//오버라이딩 </span>
    <span class="nx">draw</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">.</span><span class="nx">draw</span><span class="p">();</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Triangle</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">getArea</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span> <span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">rectangle</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Rectangel</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="dl">'</span><span class="s1">blue</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">rectangle</span><span class="p">.</span><span class="nx">draw</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">rectangle</span><span class="p">.</span><span class="nx">getArea</span><span class="p">());</span>
<span class="kd">const</span> <span class="nx">triangle</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Triangle</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span> <span class="dl">'</span><span class="s1">red</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">triangle</span><span class="p">.</span><span class="nx">draw</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">triangle</span><span class="p">.</span><span class="nx">getArea</span><span class="p">());</span>



</code></pre></div></div>
<ul>
  <li>age라는 getter를 정의하는 순간 this.age를 메모리는getter를 호출하게됨</li>
  <li>클래스를 사용하는 사용자가 옆에 동료가 잘못설정해도 그것을 방어해주는역할을 getter 와 setter가 한다</li>
  <li>클랙스가 가지고있는 고유의 값과 동일하게 반복사용되는  method를 static으로 정의해준다.(이렇게 하면 클래스자체에 연결됨)</li>
  <li>오브젝트에 상관없이 데이터에 상관없이 공통적으로 쓰여질때 많이 사용함</li>
</ul>

<h3 id="상속과-다형성">상속과 다형성</h3>
<ul>
  <li>재사용에 포인트를 둔다.</li>
</ul>

<h3 id="object">object</h3>
<ul>
  <li>instance of a class</li>
  <li>created many times</li>
  <li>data in(실제로 메모리에 올라감)</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//primitive type</span>
<span class="kd">const</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">jjung</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">age</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span> 

</code></pre></div></div>

<h3 id="1-리터럴과-프로퍼티">1. 리터럴과 프로퍼티</h3>
<ul>
  <li>중괄호 {…} 안에는 키: 값 쌍으로 구성된 프로퍼티가 들어감</li>
  <li>콜론을 기준으로 왼쪽엔 키 오른쪽엔 값이 위치
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">user</span> <span class="o">=</span> <span class="p">{</span>            <span class="c1">//객체</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">eunho</span><span class="dl">"</span><span class="p">,</span>       <span class="c1">//키:"name", 값: "eunho"</span>
  <span class="na">age</span><span class="p">:</span> <span class="mi">30</span>              <span class="c1">//키: "age", 값: 30</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>상수객체는 수정될수있음</li>
  <li>const로 선언된 객체는 수정이 가능하다.
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">junghyun</span><span class="dl">"</span>
  <span class="p">};</span>
  <span class="nx">user</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Eunho</span><span class="dl">"</span><span class="p">;</span> 

  <span class="nx">alert</span><span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">//Eunho;</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="2대괄호-표기법">2.대괄호 표기법</h3>
<ul>
  <li>문자열을 사용할 땐 문자열을 따옴표로 묶어줘야한다.</li>
  <li>문자열 뿐만 아니라 표현식의 평가 결과를 프로퍼티 키로 사용할수 있음</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">let</span> <span class="nx">key</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">likes birds</span><span class="dl">"</span><span class="p">;</span>

    <span class="nx">user</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>

</code></pre></div></div>
<h3 id="21-계산된-프로퍼티">2.1 계산된 프로퍼티</h3>
<ul>
  <li>
    <p>객체를 만들때 객체 리터럴 안의 프로퍼티 키가 대괄호로 둘러싸여있는경우 계산된 프로퍼티라고 부른다.
```javascript</p>

    <p>let fruit = prompt(“어떤 과일을 구매하시겠습니까?”, “apple”);
  let bag = {};</p>

    <p>// 변수 fruit을 사용해 프로퍼티 이름을 만들었습니다.
  bag[fruit] = 5;</p>
  </li>
</ul>

<p>```</p>
<ul>
  <li>위 예시에서 [fruit]는 프로퍼티 이름을 변수 fruit에서 가져오겠다는 것을 의미합니다.<br /></li>
</ul>

<p>사용자가 프롬프트 대화상자에 apple을 입력했다면 bag엔 {apple: 5}가 할당되었을 겁니다.</p>
:ET