I"t<h2 id="실행컨텍스트의-개념">실행컨텍스트의 개념</h2>
<ul>
  <li>실행 가능한 자바스크립트 코드 블록이 실행되는 환경(대부분 함수임)</li>
  <li>현재 실행되는 컨텍스트에서 이 컨텍스트와 관련 없는 실행코드가 실행되면,<br /> 
새로운 컨텍스트가 생성되어 스택에 들어가고 제어권이 그 컨텍스트로 이동한다.</li>
</ul>

<figure class="highlight"><pre><code class="language-js" data-lang="js"> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hi this is global context</span><span class="dl">"</span><span class="p">);</span>
 
 <span class="kd">function</span> <span class="nx">Excontext1</span><span class="p">()</span> <span class="p">{</span>
   <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">This is ExContext1!</span><span class="dl">"</span><span class="p">);</span>
 <span class="p">}</span>
 <span class="kd">function</span> <span class="nx">Excontext2</span><span class="p">()</span> <span class="p">{</span>
   <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">This is Excontext2!</span><span class="dl">"</span><span class="p">);</span>
 <span class="p">}</span></code></pre></figure>

<p>//새로운 함수 호출이 발생하면 새로운 컨텍스트가 만들어 지고 실행되며, 종료되면 반환된다.</p>

<p>[실행 컨텍스트가 형성되는 경우]</p>
<ol>
  <li>전역코드</li>
  <li>eval()함수로 실행되는 코드</li>
  <li>함수안의 코드를 실행할 경우</li>
</ol>

<h2 id="실행컨텍스트-생성과정">실행컨텍스트 생성과정</h2>

<h3 id="1-활성-객체와-변수-객체">1. 활성 객체와 변수 객체</h3>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">execute</span><span class="p">(</span><span class="nx">param1</span><span class="p">,</span> <span class="nx">param2</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
  <span class="kd">function</span> <span class="nx">fun</span><span class="p">(){</span>
    <span class="k">return</span> <span class="nx">a</span><span class="o">+</span><span class="nx">b</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">param1</span> <span class="o">+</span> <span class="nx">param2</span> <span class="o">+</span> <span class="nx">func</span><span class="p">();</span>
<span class="p">}</span>
<span class="nx">execute</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span></code></pre></figure>

<h4 id="11-활성-객체-생성">1.1 활성 객체 생성</h4>
<ul>
  <li>실행컨텍스트가 생성되면 자바스크립트 엔진은 해당 컨텍스트에서 실행에 필요한 <br /> 여러가지 정보를 담을 객체를 생성함 이를 활성객체라 한다.<br />
이 객체에 앞으로 사용하게 될 매개변수나 사용자가 정의한 변수및 객체를 저장하고 새로만들어진 컨텍스트로 접근 가능하게 되어있다.
    <h4 id="12-arguments객체-생성">1.2 arguments객체 생성</h4>
  </li>
  <li>앞서 만들어진 활성객체는 arguments프로퍼티로 이 arguments객체를 참조함.</li>
</ul>

<p><img src="../assets/img/ex01.png" alt="" />;</p>
<ul>
  <li>execute() 함수의 param1과 param2가 들어왔을경우 활성 객체의 상태를 표현함.</li>
</ul>

<h4 id="13-스코프-정보-생성">1.3 스코프 정보 생성</h4>
<ul>
  <li>현재 컨텍스트의 유효 범위를 나타내는 스코프 정보를 생성.<br />
이 스코프 정보는 현재 실행중인 실행 컨텍스트 안에서 연결리스트와 유사한 형식으로 만들어짐.
(현재 컨텍스트에서 특정변수에 접근해야 할 경우, 리스트를 활용함.)
    <h3 id="2-스코프-체인">2. 스코프 체인</h3>
  </li>
</ul>

:ET