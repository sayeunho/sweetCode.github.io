I"u<h2 id="variable">Variable</h2>
<ul>
  <li>let( added in ES6)</li>
</ul>

<h3 id="전역변수---어느곳에서나-접근이-가능함">전역변수 - 어느곳에서나 접근이 가능함</h3>
<ul>
  <li>글로벌한 변수들은 어플리케이션이 실행되는 순간부터 끝나는 순간까지 메모리에 항상 탑재되어있기때문에 최소한으로 쓰는게 좋음.</li>
</ul>

<h3 id="블럭스코프">블럭스코프</h3>
<ul>
  <li>블럭안에 내용을 작성하면 블럭밖에서는 코드를 볼수없게됨</li>
</ul>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">globalName</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">global name</span><span class="dl">'</span><span class="p">;</span> <span class="c1">//전역변수</span>

<span class="p">{</span>
    <span class="kd">let</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">eunho</span><span class="dl">'</span><span class="p">;</span>          <span class="c1">//블럭 스코프</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>
    <span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">globalName</span><span class="p">);</span>

<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span> <span class="sr">/</span><span class="err">
</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">globalName</span><span class="p">);</span></code></pre></figure>

<h3 id="var-dont-ever-use-this">var (don’t ever use this!!)</h3>

<p>(1) 변수의 중복 선언이 가능</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Jack</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Jack2</span><span class="dl">'</span><span class="p">;</span> <span class="c1">// 정상 동작</span>

<span class="kd">let</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Jack</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Jack2</span><span class="dl">'</span><span class="p">;</span> <span class="c1">// Uncaught SyntaxError: Identifier 'name' has already been declared</span>

<span class="kd">const</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Jack</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Jack2</span><span class="dl">'</span><span class="p">;</span> <span class="c1">// Uncaught SyntaxError: Identifier 'name' has already been declared</span>

</code></pre></div></div>
<p>(2) var 키워드 생략 가능</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">globalVar</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">globalVar</span><span class="dl">'</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">globalVar</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">globalVar</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">globlVar</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">globlVar</span><span class="dl">'</span> <span class="c1">// 오타</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">globalVar</span><span class="p">)</span> <span class="c1">// globalVar!</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">globlVar</span><span class="p">)</span> <span class="c1">// globlVar?</span>

</code></pre></div></div>
<ul>
  <li>var hoisting (어디에 선언했든 상관없이 항상 제일위로 선언을 끌어올려주는 것)</li>
</ul>

<p>console.log(age); //변수를 선언하기 전에 호출함
var age; //변수선언
age = 4; //값을 할당함</p>

<p>(3) “use strict”</p>

<ul>
  <li>엄격한 모드로 선언시 각종 오류를 잡아낼수있다.</li>
  <li>“use strict”는 최상단에 위치시킨다.</li>
  <li>use strict를 취소할 방법은 없습니다.</li>
  <li>자바스크립트 엔진을 이전 방식으로 되돌리는 “no use strict”같은 지시자는 존재하지 않습니다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="dl">"</span><span class="s2">use strict</span><span class="dl">"</span>

<span class="nx">testvar</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>  <span class="c1">// Uncaught ReferenceError: testvar is not defined</span>

</code></pre></div></div>
<p>(4) 호이스팅
호이스팅: 스코프 안에 있는 선언들을 모두 스코프의 최상단으로 끌어올리는 것을 말합니다.
let은 hoist 안되는 것이 아니라 TDZ에 들어가 있어 참조에러를 일으킵니다.</p>

<h3 id="constantsimmutable-data-type">Constants(Immutable data type)</h3>
<ul>
  <li>한번 값을 할당하면 절대 바뀌지않음.</li>
  <li>보안상의 이유</li>
</ul>

<p>const daysInWeek = 7;
const maxNumber = 5;</p>

:ET